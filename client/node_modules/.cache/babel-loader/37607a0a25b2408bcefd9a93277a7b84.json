{"ast":null,"code":"import 'core-js/modules/es6.function.bind';\nimport _newArrowCheck from '@babel/runtime/helpers/newArrowCheck';\nimport { ApolloLink } from 'apollo-link';\nimport { send, toObservable, unobserveOrCancel } from '@absinthe/socket';\nimport { compose } from 'flow-static-land/lib/Fun';\nimport { print } from 'graphql';\nvar _this = undefined;\n\nvar unobserveOrCancelIfNeeded = function unobserveOrCancelIfNeeded(absintheSocket, notifier, observer) {\n  _newArrowCheck(this, _this);\n\n  if (notifier && observer) {\n    unobserveOrCancel(absintheSocket, notifier, observer);\n  }\n}.bind(undefined);\n\nvar notifierToObservable = function notifierToObservable(absintheSocket, onError, onStart) {\n  var _this2 = this;\n\n  _newArrowCheck(this, _this);\n\n  return function (notifier) {\n    _newArrowCheck(this, _this2);\n\n    return toObservable(absintheSocket, notifier, {\n      onError: onError,\n      onStart: onStart,\n      unsubscribe: unobserveOrCancelIfNeeded\n    });\n  }.bind(this);\n}.bind(undefined);\n\nvar getRequest = function getRequest(_ref) {\n  var query = _ref.query,\n      variables = _ref.variables;\n\n  _newArrowCheck(this, _this);\n\n  return {\n    operation: print(query),\n    variables: variables\n  };\n}.bind(undefined);\n/**\n * Creates a terminating ApolloLink to request operations using given\n * AbsintheSocket instance\n */\n\n\nvar createAbsintheSocketLink = function createAbsintheSocketLink(absintheSocket, onError, onStart) {\n  var _this3 = this;\n\n  _newArrowCheck(this, _this);\n\n  return new ApolloLink(compose(notifierToObservable(absintheSocket, onError, onStart), function (request) {\n    _newArrowCheck(this, _this3);\n\n    return send(absintheSocket, request);\n  }.bind(this), getRequest));\n}.bind(undefined);\n\nexport { createAbsintheSocketLink };","map":null,"metadata":{},"sourceType":"module"}