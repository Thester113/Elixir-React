{"ast":null,"code":"var _jsxFileName = \"/Users/tomhester/Elixir-React-FS/full_stack_app/client/src/components/Users.js\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\n\nfunction Users() {\n  const LIST_USERS = gql`\n    {\n      listUsers {\n        id\n        name\n        email\n      }\n    }\n  `;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, \"Users!\"), /*#__PURE__*/React.createElement(Query, {\n    query: LIST_USERS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, _ref => {\n    let {\n      loading,\n      error,\n      data\n    } = _ref;\n    if (loading) return \"Loading...\";\n    if (error) return `Error! ${error.message}`;\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, data.listUsers.map(user => /*#__PURE__*/React.createElement(\"li\", {\n      key: user.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    }, user.name, \": \", user.email)));\n  }));\n}\n\nexport default Users;","map":{"version":3,"sources":["/Users/tomhester/Elixir-React-FS/full_stack_app/client/src/components/Users.js"],"names":["gql","React","Query","Users","LIST_USERS","loading","error","data","message","listUsers","map","user","id","name","email"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,cAAtB;;AAEA,SAASC,KAAT,GAAiB;AACf,QAAMC,UAAU,GAAGJ,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GARE;AAUA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEI,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,QAA8B;AAAA,QAA7B;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,KAA6B;AAC7B,QAAIF,OAAJ,EAAa,OAAO,YAAP;AACb,QAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B;AAEX,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,IAAI,CAACE,SAAL,CAAeC,GAAf,CAAmBC,IAAI,iBACtB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,IAAI,CAACE,IADR,QACgBF,IAAI,CAACG,KADrB,CADD,CADH,CADF;AASD,GAdH,CAFF,CADF;AAqBC;;AACD,eAAeX,KAAf","sourcesContent":["import gql from \"graphql-tag\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\n\nfunction Users() {\n  const LIST_USERS = gql`\n    {\n      listUsers {\n        id\n        name\n        email\n      }\n    }\n  `;\n\n  return (\n    <div>\n      <h1>Users!</h1>\n      <Query query={LIST_USERS}>\n        {({ loading, error, data }) => {\n          if (loading) return \"Loading...\";\n          if (error) return `Error! ${error.message}`;\n\n          return (\n            <ul>\n              {data.listUsers.map(user => (\n                <li key={user.id}>\n                  {user.name}: {user.email}\n                </li>\n              ))}\n            </ul>\n          );\n        }}\n      </Query>\n      </div>\n    );\n  }\n  export default Users;"]},"metadata":{},"sourceType":"module"}