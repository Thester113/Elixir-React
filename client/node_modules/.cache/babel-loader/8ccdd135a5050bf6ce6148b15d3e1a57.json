{"ast":null,"code":"import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _newArrowCheck from 'babel-runtime/helpers/newArrowCheck';\nimport { curry } from 'flow-static-land/lib/Fun';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _Array$from from 'babel-runtime/core-js/array/from';\nimport _Object$keys from 'babel-runtime/core-js/object/keys';\nimport _Number$isInteger from 'babel-runtime/core-js/number/is-integer';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nvar _this = undefined;\n/**\n * Returns a new Array with elements appended to the one given.\n */\n\nvar append = function (elements, array) {\n  _newArrowCheck(this, _this);\n\n  return [].concat(_toConsumableArray(array), _toConsumableArray(elements));\n}.bind(undefined);\n\nvar append$1 = curry(append);\nvar _this$1 = undefined;\n/**\n * Returns input if it is an Array or returns a new Array with input inside if\n * it is not.\n */\n\nvar convertIfNot = function (input) {\n  _newArrowCheck(this, _this$1);\n\n  return Array.isArray(input) ? input : [input];\n}.bind(undefined);\n\nvar _this$3 = undefined;\n/**\n * Returns true if given index is the last one or false otherwise.\n */\n\nvar isLastIndex = function (array, index) {\n  _newArrowCheck(this, _this$3);\n\n  return index === array.length - 1;\n}.bind(undefined);\n\nvar isLastIndex$1 = curry(isLastIndex);\nvar _this$2 = undefined;\n/**\n * Returns 0 if current index is the last one, or returns next if it is not.\n */\n\nvar cycleNext = function (array, currentIndex) {\n  _newArrowCheck(this, _this$2);\n\n  return isLastIndex$1(array, currentIndex) ? 0 : currentIndex + 1;\n}.bind(undefined);\n\nvar cycleNext$1 = curry(cycleNext);\nvar _this$4 = undefined;\n\nvar getObjectLength = function (object) {\n  _newArrowCheck(this, _this$4);\n\n  return Math.max.apply(Math, _toConsumableArray(_Object$keys(object))) + 1;\n}.bind(undefined);\n/**\n * Creates a new array using the given object\n * If all of its entries are array keys.\n * \n * (it could also have a property length with its size)\n */\n\n\nvar fromObject = function (object) {\n  _newArrowCheck(this, _this$4);\n\n  return _Array$from(\"length\" in object ? object : _extends({}, object, {\n    length: getObjectLength(object)\n  }));\n}.bind(undefined);\n\nvar _this$5 = undefined;\n/**\n * Returns a new Array with the result of having inserted the given elements at\n * the specified index.\n */\n\nvar insert = function (index, elements, array) {\n  _newArrowCheck(this, _this$5);\n\n  return [].concat(_toConsumableArray(array.slice(0, index)), _toConsumableArray(elements), _toConsumableArray(array.slice(index + 1)));\n}.bind(undefined);\n\nvar insert$1 = curry(insert);\nvar _this$6 = undefined;\n\nvar isIntGreaterThan = function (number, other) {\n  _newArrowCheck(this, _this$6);\n\n  return _Number$isInteger(number) && number >= other;\n}.bind(undefined);\n/**\n * Returns true if the given string is an Array key or false otherwise.\n */\n\n\nvar isKey = function (string) {\n  _newArrowCheck(this, _this$6);\n\n  return isIntGreaterThan(Number(string), 0);\n}.bind(undefined);\n\nvar _this$7 = undefined;\n/**\n * Returns true if an Array can be created from the given Object, or in other\n * words, if it has or not a length property, and the rest of its keys are Array\n * ones.\n */\n\nvar isPossibleFromObject = function (_ref) {\n  var length = _ref.length,\n      rest = _objectWithoutProperties(_ref, [\"length\"]);\n\n  _newArrowCheck(this, _this$7);\n\n  return _Object$keys(rest).every(isKey);\n}.bind(undefined);\n\nvar _this$8 = undefined;\n/**\n * Returns a new Array with elements prepended to the one given.\n */\n\nvar prepend = function (elements, array) {\n  _newArrowCheck(this, _this$8);\n\n  return [].concat(_toConsumableArray(elements), _toConsumableArray(array));\n}.bind(undefined);\n\nvar prepend$1 = curry(prepend);\nvar _this$9 = undefined;\n/**\n * Reduce the given array applying reduce function only to elements filtered.\n */\n\nvar reduceIf = function (filter, reduce, resultInitial, array) {\n  _newArrowCheck(this, _this$9);\n\n  return array.reduce(function (result, element, index) {\n    _newArrowCheck(this, _this$9);\n\n    return filter(element, index, result) ? reduce(result, element, index) : result;\n  }.bind(this), resultInitial);\n}.bind(undefined);\n\nvar reduceIf$1 = curry(reduceIf);\nvar _this$10 = undefined;\n/**\n * Reduce the given array applying reduce function while shouldProceed function\n * returns true.\n */\n\nvar reduceWhile = function (shouldProceed, reduce, resultInitial, array) {\n  _newArrowCheck(this, _this$10);\n\n  var result = resultInitial;\n  array.every(function (element, index) {\n    _newArrowCheck(this, _this$10);\n\n    var proceed = shouldProceed(element, index, result);\n\n    if (proceed) {\n      result = reduce(result, element, index);\n    }\n\n    return proceed;\n  }.bind(this));\n  return result;\n}.bind(undefined);\n\nvar reduceWhile$1 = curry(reduceWhile);\nvar _this$11 = undefined;\n/**\n * Returns a new Array with the result of having removed the specified amount\n * (count) of elements at the given index.\n */\n\nvar remove = function (index, count, array) {\n  _newArrowCheck(this, _this$11);\n\n  return [].concat(_toConsumableArray(array.slice(0, index)), _toConsumableArray(array.slice(index + count)));\n}.bind(undefined);\n\nvar remove$1 = curry(remove);\nvar _this$12 = undefined;\n/**\n * Returns a new Array with the given size (count) filled with the specified\n * element.\n */\n\nvar repeat = function (count, element) {\n  _newArrowCheck(this, _this$12);\n\n  return [].concat(_toConsumableArray(Array(count))).map(function () {\n    _newArrowCheck(this, _this$12);\n\n    return element;\n  }.bind(this));\n}.bind(undefined);\n\nvar repeat$1 = curry(repeat);\nvar _this$13 = undefined;\n/**\n * Returns a new Array with the result of having replaced the elements at the\n * given index with the ones specified.\n */\n\nvar replace = function (index, elements, array) {\n  _newArrowCheck(this, _this$13);\n\n  return [].concat(_toConsumableArray(array.slice(0, index)), _toConsumableArray(elements), _toConsumableArray(array.slice(index + elements.length)));\n}.bind(undefined);\n\nvar replace$1 = curry(replace);\nvar _this$14 = undefined;\n/**\n * Returns an absolute index from a relative one.\n * \n * Relative indexes differ from absolute ones in that they can be negative and\n * in those cases it would be as simple as substracting them from the length of\n * the array from where they belong to obtain their absolute counterparts.\n */\n\nvar resolveIndex = function (array, relativeIndex) {\n  _newArrowCheck(this, _this$14);\n\n  return relativeIndex < 0 ? array.length - relativeIndex : relativeIndex;\n}.bind(undefined);\n\nvar resolveIndex$1 = curry(resolveIndex);\nexport { append$1 as append, convertIfNot, cycleNext$1 as cycleNext, fromObject, insert$1 as insert, isKey, isLastIndex$1 as isLastIndex, isPossibleFromObject, prepend$1 as prepend, reduceIf$1 as reduceIf, reduceWhile$1 as reduceWhile, remove$1 as remove, repeat$1 as repeat, replace$1 as replace, resolveIndex$1 as resolveIndex };","map":null,"metadata":{},"sourceType":"module"}