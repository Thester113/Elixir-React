{"ast":null,"code":"import 'core-js/modules/es6.array.map';\nimport 'core-js/modules/es6.regexp.match';\nimport 'core-js/modules/es6.array.some';\nimport 'core-js/modules/es6.function.bind';\nimport _newArrowCheck from '@babel/runtime/helpers/newArrowCheck';\nvar _this = undefined;\n\nvar locationsToString = function locationsToString(locations) {\n  var _this2 = this;\n\n  _newArrowCheck(this, _this);\n\n  return locations.map(function (_ref) {\n    var column = _ref.column,\n        line = _ref.line;\n\n    _newArrowCheck(this, _this2);\n\n    return \"\".concat(line, \":\").concat(column);\n  }.bind(this)).join(\"; \");\n}.bind(undefined);\n\nvar errorToString = function errorToString(_ref2) {\n  var message = _ref2.message,\n      locations = _ref2.locations;\n\n  _newArrowCheck(this, _this);\n\n  return message + (locations ? \" (\".concat(locationsToString(locations), \")\") : \"\");\n}.bind(undefined);\n/**\n * Transforms an array of GqlError into a string.\n *\n * @example\n *\n * const gqlRespose = {\n *   errors: [\n *     {message: \"First Error\", locations: [{column: 10, line: 2}]},\n *     {message: \"Second Error\", locations: [{column: 2, line: 4}]}\n *   ]\n * }\n *\n * const error = errorsToString(gqlRespose.errors);\n * // string with the following:\n * // First Error (2:10)\n * // Second Error (4:2)\n */\n\n\nvar errorsToString = function errorsToString(gqlErrors) {\n  _newArrowCheck(this, _this);\n\n  return gqlErrors.map(errorToString).join(\"\\n\");\n}.bind(undefined);\n\nvar _this$1 = undefined;\nvar operationTypeRe = /^\\s*(query|mutation|subscription|\\{)/;\n\nvar getOperationTypeFromMatched = function getOperationTypeFromMatched(matched) {\n  _newArrowCheck(this, _this$1);\n\n  return matched === \"{\" ? \"query\" : matched;\n}.bind(undefined);\n/**\n * Returns the type (query, mutation, or subscription) of the given operation\n *\n * @example\n *\n * const operation = `\n *   subscription userSubscription($userId: ID!) {\n *     user(userId: $userId) {\n *       id\n *       name\n *     }\n *   }\n * `;\n *\n * const operationType = getOperationType(operation);\n *\n * console.log(operationType); // \"subscription\"\n */\n\n\nvar getOperationType = function getOperationType(operation) {\n  _newArrowCheck(this, _this$1);\n\n  var result = operation.match(operationTypeRe);\n\n  if (!result) {\n    throw new TypeError(\"Invalid operation:\\n\".concat(operation));\n  }\n\n  return getOperationTypeFromMatched(result[1]);\n}.bind(undefined);\n\nvar _this$2 = undefined;\n\nvar isSubscription = function isSubscription(definition) {\n  _newArrowCheck(this, _this$2);\n\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}.bind(undefined);\n/**\n * Returns true if documentNode has a subscription or false otherwise\n */\n\n\nvar hasSubscription = function hasSubscription(documentNode) {\n  _newArrowCheck(this, _this$2);\n\n  return documentNode.definitions.some(isSubscription);\n}.bind(undefined);\n\nvar _this$3 = undefined;\n/**\n * Creates a GqlRequest using given GqlRequestCompat\n *\n * @param {GqlRequestCompat<Variables>} gqlRequestCompat\n *\n * @return {GqlRequest<Variables>} \n *\n * @example\n * const query = `\n *   query userQuery($userId: ID!) {\n *     user(userId: $userId) {\n *       id\n *       email\n *     }\n *   }\n * `;\n * \n * console.log(requestFromCompat({query, variables: {userId: 10}}));\n * // {operation: \"...\", variables: {userId: 10}}\n */\n\nvar requestFromCompat = function requestFromCompat(_ref) {\n  var operation = _ref.query,\n      variables = _ref.variables;\n\n  _newArrowCheck(this, _this$3);\n\n  return variables ? {\n    operation: operation,\n    variables: variables\n  } : {\n    operation: operation\n  };\n}.bind(undefined);\n\nvar _this$4 = undefined;\n/**\n * Creates a GqlRequest using given GqlRequestCompat\n *\n * @param {GqlRequest<Variables>} gqlRequest\n *\n * @return {GqlRequestCompat<Variables>}\n * \n * @example\n * const operation = `\n *   query userQuery($userId: ID!) {\n *     user(userId: $userId) {\n *       id\n *       email\n *     }\n *   }\n * `;\n * \n * console.log(requestToCompat({operation, variables: {userId: 10}}));\n * // {query: \"...\", variables: {userId: 10}}\n */\n\nvar requestToCompat = function requestToCompat(_ref) {\n  var query = _ref.operation,\n      variables = _ref.variables;\n\n  _newArrowCheck(this, _this$4);\n\n  return variables ? {\n    query: query,\n    variables: variables\n  } : {\n    query: query\n  };\n}.bind(undefined);\n\nexport { errorsToString, getOperationType, hasSubscription, requestFromCompat, requestToCompat };","map":null,"metadata":{},"sourceType":"module"}