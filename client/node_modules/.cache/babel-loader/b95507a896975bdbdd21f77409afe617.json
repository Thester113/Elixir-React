{"ast":null,"code":"import 'core-js/modules/es6.array.find-index';\nimport 'core-js/modules/es6.array.find';\nimport 'core-js/modules/es6.function.name';\nimport { hasIn, map } from '@jumpn/utils-composite';\nimport 'phoenix';\nimport 'core-js/modules/web.dom.iterable';\nimport 'core-js/modules/es6.array.for-each';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport { requestToCompat, errorsToString, getOperationType } from '@jumpn/utils-graphql';\nimport Observable from 'zen-observable';\nimport 'core-js/modules/es7.array.includes';\nimport 'core-js/modules/es6.string.includes';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport 'core-js/modules/es6.array.index-of';\nimport { replace, remove, append } from '@jumpn/utils-array';\nimport 'core-js/modules/es6.function.bind';\nimport _newArrowCheck from '@babel/runtime/helpers/newArrowCheck';\nvar _this = undefined;\n\nvar cancel = function cancel(_ref) {\n  var activeObservers = _ref.activeObservers,\n      canceledObservers = _ref.canceledObservers,\n      rest = _objectWithoutProperties(_ref, [\"activeObservers\", \"canceledObservers\"]);\n\n  _newArrowCheck(this, _this);\n\n  return _objectSpread({}, rest, {\n    isActive: false,\n    activeObservers: [],\n    canceledObservers: _toConsumableArray(activeObservers).concat(_toConsumableArray(canceledObservers))\n  });\n}.bind(undefined);\n\nvar _this$1 = undefined;\n\nvar getNotifier = function getNotifier(handlerName, payload) {\n  var _this2 = this;\n\n  _newArrowCheck(this, _this$1);\n\n  return function (observer) {\n    _newArrowCheck(this, _this2);\n\n    return observer[handlerName] && observer[handlerName](payload);\n  }.bind(this);\n}.bind(undefined);\n\nvar getHandlerName = function getHandlerName(_ref) {\n  var name = _ref.name;\n\n  _newArrowCheck(this, _this$1);\n\n  return \"on\".concat(name);\n}.bind(undefined);\n\nvar notifyAll = function notifyAll(observers, event) {\n  _newArrowCheck(this, _this$1);\n\n  return observers.forEach(getNotifier(getHandlerName(event), event.payload));\n}.bind(undefined);\n\nvar _this$2 = undefined;\n\nvar notifyCanceled = function notifyCanceled(notifier, event) {\n  _newArrowCheck(this, _this$2);\n\n  notifyAll(notifier.canceledObservers, event);\n  return notifier;\n}.bind(undefined);\n\nvar eventNames = {\n  abort: \"Abort\",\n  cancel: \"Cancel\",\n  error: \"Error\",\n  result: \"Result\",\n  start: \"Start\"\n};\nvar _this$3 = undefined;\n\nvar createStartEvent = function createStartEvent(payload) {\n  _newArrowCheck(this, _this$3);\n\n  return {\n    payload: payload,\n    name: eventNames.start\n  };\n}.bind(undefined);\n\nvar createResultEvent = function createResultEvent(payload) {\n  _newArrowCheck(this, _this$3);\n\n  return {\n    payload: payload,\n    name: eventNames.result\n  };\n}.bind(undefined);\n\nvar createErrorEvent = function createErrorEvent(payload) {\n  _newArrowCheck(this, _this$3);\n\n  return {\n    payload: payload,\n    name: eventNames.error\n  };\n}.bind(undefined);\n\nvar createCancelEvent = function createCancelEvent() {\n  _newArrowCheck(this, _this$3);\n\n  return {\n    name: eventNames.cancel,\n    payload: undefined\n  };\n}.bind(undefined);\n\nvar createAbortEvent = function createAbortEvent(payload) {\n  _newArrowCheck(this, _this$3);\n\n  return {\n    payload: payload,\n    name: eventNames.abort\n  };\n}.bind(undefined);\n\nvar _this$4 = undefined;\n\nvar clearCanceled = function clearCanceled(notifier) {\n  _newArrowCheck(this, _this$4);\n\n  return _objectSpread({}, notifier, {\n    canceledObservers: []\n  });\n}.bind(undefined);\n\nvar flushCanceled = function flushCanceled(notifier) {\n  _newArrowCheck(this, _this$4);\n\n  return notifier.canceledObservers.length > 0 ? clearCanceled(notifyCanceled(notifier, createCancelEvent())) : notifier;\n}.bind(undefined);\n\nvar _this$5 = undefined;\n\nvar findIndex = function findIndex(notifiers, key, value // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n) {\n  _newArrowCheck(this, _this$5);\n\n  return notifiers.findIndex(hasIn([key], value));\n}.bind(undefined);\n\nvar _this$6 = undefined;\n\nvar refresh = function refresh(notifier) {\n  var _this2 = this;\n\n  _newArrowCheck(this, _this$6);\n\n  return function (notifiers) {\n    _newArrowCheck(this, _this2);\n\n    return replace(findIndex(notifiers, \"request\", notifier.request), [notifier], notifiers);\n  }.bind(this);\n}.bind(undefined);\n\nvar _this$7 = undefined;\n\nvar remove$1 = function remove$$1(notifier) {\n  var _this2 = this;\n\n  _newArrowCheck(this, _this$7);\n\n  return function (notifiers) {\n    _newArrowCheck(this, _this2);\n\n    return remove(findIndex(notifiers, \"request\", notifier.request), 1, notifiers);\n  }.bind(this);\n}.bind(undefined);\n\nvar _this$8 = undefined;\n\nvar updateNotifiers = function updateNotifiers(absintheSocket, updater) {\n  _newArrowCheck(this, _this$8);\n\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n  return absintheSocket;\n}.bind(undefined);\n\nvar _this$9 = undefined;\n\nvar refreshNotifier = function refreshNotifier(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$9);\n\n  updateNotifiers(absintheSocket, refresh(notifier));\n  return notifier;\n}.bind(undefined);\n\nvar requestStatuses = {\n  canceled: \"canceled\",\n  canceling: \"canceling\",\n  pending: \"pending\",\n  sent: \"sent\",\n  sending: \"sending\"\n};\nvar _this$a = undefined;\n\nvar getObservers = function getObservers(_ref) {\n  var activeObservers = _ref.activeObservers,\n      canceledObservers = _ref.canceledObservers;\n\n  _newArrowCheck(this, _this$a);\n\n  return _toConsumableArray(activeObservers).concat(_toConsumableArray(canceledObservers));\n}.bind(undefined);\n\nvar notify = function notify(notifier, event) {\n  _newArrowCheck(this, _this$a);\n\n  notifyAll(getObservers(notifier), event);\n  return notifier;\n}.bind(undefined);\n\nvar _this$b = undefined;\n\nvar abortNotifier = function abortNotifier(absintheSocket, notifier, error) {\n  _newArrowCheck(this, _this$b);\n\n  return updateNotifiers(absintheSocket, remove$1(notify(notifier, createAbortEvent(error))));\n}.bind(undefined);\n\nvar _this$c = undefined;\n\nvar find = function find(notifiers, key, value // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n) {\n  _newArrowCheck(this, _this$c);\n\n  return notifiers.find(hasIn([key], value));\n}.bind(undefined);\n\nvar _this$d = undefined;\n\nvar notifyActive = function notifyActive(notifier, event) {\n  _newArrowCheck(this, _this$d);\n\n  notifyAll(notifier.activeObservers, event);\n  return notifier;\n}.bind(undefined);\n\nvar _this$e = undefined;\n\nvar notifyResultEvent = function notifyResultEvent(notifier, result) {\n  _newArrowCheck(this, _this$e);\n\n  return notifyActive(notifier, createResultEvent(result));\n}.bind(undefined);\n\nvar _this$f = undefined;\n\nvar notifyStartEvent = function notifyStartEvent(notifier) {\n  _newArrowCheck(this, _this$f);\n\n  return notifyActive(notifier, createStartEvent(notifier));\n}.bind(undefined);\n\nvar _this$g = undefined;\n\nvar reset = function reset(notifier) {\n  _newArrowCheck(this, _this$g);\n\n  return flushCanceled(_objectSpread({}, notifier, {\n    isActive: true,\n    requestStatus: requestStatuses.pending,\n    subscriptionId: undefined\n  }));\n}.bind(undefined);\n\nvar _this$h = undefined;\n\nvar handlePush = function handlePush(push, handler) {\n  _newArrowCheck(this, _this$h);\n\n  return push.receive(\"ok\", handler.onSucceed).receive(\"error\", handler.onError).receive(\"timeout\", handler.onTimeout);\n}.bind(undefined);\n\nvar _this$i = undefined;\n\nvar getPushHandlerMethodGetter = function getPushHandlerMethodGetter(absintheSocket, request) {\n  var _this2 = this;\n\n  _newArrowCheck(this, _this$i);\n\n  return function (handle) {\n    var _this3 = this;\n\n    _newArrowCheck(this, _this2);\n\n    return function () {\n      _newArrowCheck(this, _this3);\n\n      var notifier = find(absintheSocket.notifiers, \"request\", request);\n\n      if (notifier) {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        handle.apply(void 0, [absintheSocket, notifier].concat(args));\n      }\n    }.bind(this);\n  }.bind(this);\n}.bind(undefined);\n\nvar getPushHandler = function getPushHandler(absintheSocket, request, notifierPushHandler) {\n  _newArrowCheck(this, _this$i);\n\n  return map(getPushHandlerMethodGetter(absintheSocket, request), notifierPushHandler);\n}.bind(undefined);\n\nvar pushAbsintheEvent = function pushAbsintheEvent(absintheSocket, request, notifierPushHandler, absintheEvent) {\n  _newArrowCheck(this, _this$i);\n\n  handlePush(absintheSocket.channel.push(absintheEvent.name, absintheEvent.payload), getPushHandler(absintheSocket, request, notifierPushHandler));\n  return absintheSocket;\n}.bind(undefined);\n\nvar absintheEventNames = {\n  doc: \"doc\",\n  unsubscribe: \"unsubscribe\"\n};\nvar _this$j = undefined;\n\nvar createAbsintheUnsubscribeEvent = function createAbsintheUnsubscribeEvent(payload) {\n  _newArrowCheck(this, _this$j);\n\n  return {\n    payload: payload,\n    name: absintheEventNames.unsubscribe\n  };\n}.bind(undefined);\n\nvar createAbsintheDocEvent = function createAbsintheDocEvent(payload) {\n  _newArrowCheck(this, _this$j);\n\n  return {\n    payload: payload,\n    name: absintheEventNames.doc\n  };\n}.bind(undefined);\n\nvar _this$k = undefined;\n\nvar pushAbsintheDocEvent = function pushAbsintheDocEvent(absintheSocket, _ref, notifierPushHandler) {\n  var request = _ref.request;\n\n  _newArrowCheck(this, _this$k);\n\n  return pushAbsintheEvent(absintheSocket, request, notifierPushHandler, createAbsintheDocEvent(requestToCompat(request)));\n}.bind(undefined);\n\nvar setNotifierRequestStatusSending = function setNotifierRequestStatusSending(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$k);\n\n  return refreshNotifier(absintheSocket, _objectSpread({}, notifier, {\n    requestStatus: requestStatuses.sending\n  }));\n}.bind(undefined);\n\nvar createRequestError = function createRequestError(message) {\n  _newArrowCheck(this, _this$k);\n\n  return new Error(\"request: \".concat(message));\n}.bind(undefined);\n\nvar onTimeout = function onTimeout(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$k);\n\n  return notifyActive(notifier, createErrorEvent(createRequestError(\"timeout\")));\n}.bind(undefined);\n\nvar onError = function onError(absintheSocket, notifier, errorMessage) {\n  _newArrowCheck(this, _this$k);\n\n  return abortNotifier(absintheSocket, notifier, createRequestError(errorMessage));\n}.bind(undefined);\n\nvar getNotifierPushHandler = function getNotifierPushHandler(onSucceed) {\n  _newArrowCheck(this, _this$k);\n\n  return {\n    onError: onError,\n    onSucceed: onSucceed,\n    onTimeout: onTimeout\n  };\n}.bind(undefined);\n\nvar pushRequestUsing = function pushRequestUsing(absintheSocket, notifier, onSucceed) {\n  _newArrowCheck(this, _this$k);\n\n  return pushAbsintheDocEvent(absintheSocket, setNotifierRequestStatusSending(absintheSocket, notifier), getNotifierPushHandler(onSucceed));\n}.bind(undefined);\n\nvar _this$l = undefined;\n\nvar onUnsubscribeSucceedCanceled = function onUnsubscribeSucceedCanceled(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$l);\n\n  return updateNotifiers(absintheSocket, remove$1(flushCanceled(notifier)));\n}.bind(undefined);\n\nvar onUnsubscribeSucceedActive = function onUnsubscribeSucceedActive(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$l);\n\n  return subscribe(absintheSocket, refreshNotifier(absintheSocket, reset(notifier)));\n}.bind(undefined);\n\nvar createUnsubscribeError = function createUnsubscribeError(message) {\n  _newArrowCheck(this, _this$l);\n\n  return new Error(\"unsubscribe: \".concat(message));\n}.bind(undefined);\n\nvar unsubscribeHandler = {\n  onError: function onError$$1(absintheSocket, notifier, errorMessage) {\n    _newArrowCheck(this, _this$l);\n\n    return abortNotifier(absintheSocket, notifier, createUnsubscribeError(errorMessage));\n  }.bind(undefined),\n  onTimeout: function onTimeout(absintheSocket, notifier) {\n    _newArrowCheck(this, _this$l);\n\n    return notifyCanceled(notifier, createErrorEvent(createUnsubscribeError(\"timeout\")));\n  }.bind(undefined),\n  onSucceed: function onSucceed(absintheSocket, notifier) {\n    _newArrowCheck(this, _this$l);\n\n    if (notifier.isActive) {\n      onUnsubscribeSucceedActive(absintheSocket, notifier);\n    } else {\n      onUnsubscribeSucceedCanceled(absintheSocket, notifier);\n    }\n  }.bind(undefined)\n};\n\nvar pushAbsintheUnsubscribeEvent = function pushAbsintheUnsubscribeEvent(absintheSocket, _ref) {\n  var request = _ref.request,\n      subscriptionId = _ref.subscriptionId;\n\n  _newArrowCheck(this, _this$l);\n\n  return pushAbsintheEvent(absintheSocket, request, unsubscribeHandler, createAbsintheUnsubscribeEvent({\n    subscriptionId: subscriptionId\n  }));\n}.bind(undefined);\n\nvar unsubscribe = function unsubscribe(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$l);\n\n  return pushAbsintheUnsubscribeEvent(absintheSocket, refreshNotifier(absintheSocket, _objectSpread({}, notifier, {\n    requestStatus: requestStatuses.canceling\n  })));\n}.bind(undefined);\n\nvar onSubscribeSucceed = function onSubscribeSucceed(absintheSocket, notifier, _ref2) {\n  var subscriptionId = _ref2.subscriptionId;\n\n  _newArrowCheck(this, _this$l);\n\n  var subscribedNotifier = refreshNotifier(absintheSocket, _objectSpread({}, notifier, {\n    subscriptionId: subscriptionId,\n    requestStatus: requestStatuses.sent\n  }));\n\n  if (subscribedNotifier.isActive) {\n    notifyStartEvent(subscribedNotifier);\n  } else {\n    unsubscribe(absintheSocket, subscribedNotifier);\n  }\n}.bind(undefined);\n\nvar onSubscribe = function onSubscribe(absintheSocket, notifier, response) {\n  _newArrowCheck(this, _this$l);\n\n  if (response.errors) {\n    onError(absintheSocket, notifier, errorsToString(response.errors));\n  } else {\n    onSubscribeSucceed(absintheSocket, notifier, response);\n  }\n}.bind(undefined);\n\nvar subscribe = function subscribe(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$l);\n\n  return pushRequestUsing(absintheSocket, notifier, onSubscribe);\n}.bind(undefined);\n\nvar onDataMessage = function onDataMessage(absintheSocket, _ref3) {\n  var payload = _ref3.payload;\n\n  _newArrowCheck(this, _this$l);\n\n  var notifier = find(absintheSocket.notifiers, \"subscriptionId\", payload.subscriptionId);\n\n  if (notifier) {\n    notifyResultEvent(notifier, payload.result);\n  }\n}.bind(undefined);\n\nvar dataMessageEventName = \"subscription:data\";\n\nvar isDataMessage = function isDataMessage(message) {\n  _newArrowCheck(this, _this$l);\n\n  return message.event === dataMessageEventName;\n}.bind(undefined);\n\nvar _this$m = undefined;\n\nvar cancelQueryOrMutationSending = function cancelQueryOrMutationSending(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$m);\n\n  return updateNotifiers(absintheSocket, refresh(flushCanceled(cancel(notifier))));\n}.bind(undefined);\n\nvar cancelQueryOrMutationIfSending = function cancelQueryOrMutationIfSending(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$m);\n\n  return notifier.requestStatus === requestStatuses.sending ? cancelQueryOrMutationSending(absintheSocket, notifier) : absintheSocket;\n}.bind(undefined);\n\nvar cancelPending = function cancelPending(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$m);\n\n  return updateNotifiers(absintheSocket, remove$1(flushCanceled(cancel(notifier))));\n}.bind(undefined);\n\nvar cancelQueryOrMutation = function cancelQueryOrMutation(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$m);\n\n  return notifier.requestStatus === requestStatuses.pending ? cancelPending(absintheSocket, notifier) : cancelQueryOrMutationIfSending(absintheSocket, notifier);\n}.bind(undefined);\n\nvar unsubscribeIfNeeded = function unsubscribeIfNeeded(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$m);\n\n  return notifier.requestStatus === requestStatuses.sent ? unsubscribe(absintheSocket, notifier) : absintheSocket;\n}.bind(undefined);\n\nvar cancelNonPendingSubscription = function cancelNonPendingSubscription(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$m);\n\n  return unsubscribeIfNeeded(absintheSocket, refreshNotifier(absintheSocket, cancel(notifier)));\n}.bind(undefined);\n\nvar cancelSubscription = function cancelSubscription(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$m);\n\n  return notifier.requestStatus === requestStatuses.pending ? cancelPending(absintheSocket, notifier) : cancelNonPendingSubscription(absintheSocket, notifier);\n}.bind(undefined);\n\nvar cancelActive = function cancelActive(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$m);\n\n  return notifier.operationType === \"subscription\" ? cancelSubscription(absintheSocket, notifier) : cancelQueryOrMutation(absintheSocket, notifier);\n}.bind(undefined);\n/**\n * Cancels a notifier sending a Cancel event to all its observers and\n * unsubscribing in case it holds a subscription request\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n *\n * withAbsintheSocket.cancel(absintheSocket, notifier);\n */\n\n\nvar cancel$1 = function cancel$$1(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$m);\n\n  return notifier.isActive ? cancelActive(absintheSocket, notifier) : absintheSocket;\n}.bind(undefined);\n\nvar _this$n = undefined;\n\nvar setNotifierRequestStatusSent = function setNotifierRequestStatusSent(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$n);\n\n  return refreshNotifier(absintheSocket, _objectSpread({}, notifier, {\n    requestStatus: requestStatuses.sent\n  }));\n}.bind(undefined);\n\nvar onQueryOrMutationSucceed = function onQueryOrMutationSucceed(absintheSocket, notifier, response) {\n  _newArrowCheck(this, _this$n);\n\n  return updateNotifiers(absintheSocket, remove$1(notifyResultEvent(setNotifierRequestStatusSent(absintheSocket, notifier), response)));\n}.bind(undefined);\n\nvar pushQueryOrMutation = function pushQueryOrMutation(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$n);\n\n  return pushRequestUsing(absintheSocket, notifyStartEvent(notifier), onQueryOrMutationSucceed);\n}.bind(undefined);\n\nvar pushRequest = function pushRequest(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$n);\n\n  if (notifier.operationType === \"subscription\") {\n    subscribe(absintheSocket, notifier);\n  } else {\n    pushQueryOrMutation(absintheSocket, notifier);\n  }\n}.bind(undefined);\n\nvar _this$o = undefined;\n\nvar createChannelJoinError = function createChannelJoinError(message) {\n  _newArrowCheck(this, _this$o);\n\n  return new Error(\"channel join: \".concat(message));\n}.bind(undefined);\n\nvar notifyErrorToAllActive = function notifyErrorToAllActive(absintheSocket, errorMessage) {\n  var _this2 = this;\n\n  _newArrowCheck(this, _this$o);\n\n  return absintheSocket.notifiers.forEach(function (notifier) {\n    _newArrowCheck(this, _this2);\n\n    return notifyActive(notifier, createErrorEvent(createChannelJoinError(errorMessage)));\n  }.bind(this));\n}.bind(undefined); // join Push is reused and so the handler\n// https://github.com/phoenixframework/phoenix/blob/master/assets/js/phoenix.js#L356\n\n\nvar createChannelJoinHandler = function createChannelJoinHandler(absintheSocket) {\n  var _this3 = this;\n\n  _newArrowCheck(this, _this$o);\n\n  return {\n    onError: function onError(errorMessage) {\n      _newArrowCheck(this, _this3);\n\n      return notifyErrorToAllActive(absintheSocket, errorMessage);\n    }.bind(this),\n    onSucceed: function onSucceed() {\n      var _this4 = this;\n\n      _newArrowCheck(this, _this3);\n\n      return absintheSocket.notifiers.forEach(function (notifier) {\n        _newArrowCheck(this, _this4);\n\n        return pushRequest(absintheSocket, notifier);\n      }.bind(this));\n    }.bind(this),\n    onTimeout: function onTimeout() {\n      _newArrowCheck(this, _this3);\n\n      return notifyErrorToAllActive(absintheSocket, \"timeout\");\n    }.bind(this)\n  };\n}.bind(undefined);\n\nvar joinChannel = function joinChannel(absintheSocket) {\n  _newArrowCheck(this, _this$o);\n\n  handlePush(absintheSocket.channel.join(), createChannelJoinHandler(absintheSocket));\n  absintheSocket.channelJoinCreated = true;\n  return absintheSocket;\n}.bind(undefined);\n\nvar _this$p = undefined;\n\nvar onMessage = function onMessage(absintheSocket) {\n  var _this2 = this;\n\n  _newArrowCheck(this, _this$p);\n\n  return function (message) {\n    _newArrowCheck(this, _this2);\n\n    if (isDataMessage(message)) {\n      onDataMessage(absintheSocket, message);\n    }\n  }.bind(this);\n}.bind(undefined);\n\nvar createConnectionCloseError = function createConnectionCloseError() {\n  _newArrowCheck(this, _this$p);\n\n  return new Error(\"connection: close\");\n}.bind(undefined);\n\nvar notifyConnectionCloseError = function notifyConnectionCloseError(notifier) {\n  _newArrowCheck(this, _this$p);\n\n  return notify(notifier, createErrorEvent(createConnectionCloseError()));\n}.bind(undefined);\n\nvar notifierOnConnectionCloseCanceled = function notifierOnConnectionCloseCanceled(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$p);\n\n  return updateNotifiers(absintheSocket, remove$1(notifyConnectionCloseError(notifier)));\n}.bind(undefined);\n\nvar notifierOnConnectionCloseActive = function notifierOnConnectionCloseActive(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$p);\n\n  if (notifier.operationType === \"mutation\") {\n    abortNotifier(absintheSocket, notifier, createConnectionCloseError());\n  } else {\n    refreshNotifier(absintheSocket, reset(notifyConnectionCloseError(notifier)));\n  }\n}.bind(undefined);\n\nvar notifierOnConnectionClose = function notifierOnConnectionClose(absintheSocket) {\n  var _this3 = this;\n\n  _newArrowCheck(this, _this$p);\n\n  return function (notifier) {\n    _newArrowCheck(this, _this3);\n\n    if (notifier.isActive) {\n      notifierOnConnectionCloseActive(absintheSocket, notifier);\n    } else {\n      notifierOnConnectionCloseCanceled(absintheSocket, notifier);\n    }\n  }.bind(this);\n}.bind(undefined);\n\nvar onConnectionClose = function onConnectionClose(absintheSocket) {\n  var _this4 = this;\n\n  _newArrowCheck(this, _this$p);\n\n  return function () {\n    _newArrowCheck(this, _this4);\n\n    return absintheSocket.notifiers.forEach(notifierOnConnectionClose(absintheSocket));\n  }.bind(this);\n}.bind(undefined);\n\nvar shouldJoinChannel = function shouldJoinChannel(absintheSocket) {\n  _newArrowCheck(this, _this$p);\n\n  return !absintheSocket.channelJoinCreated && absintheSocket.notifiers.length > 0;\n}.bind(undefined);\n\nvar onConnectionOpen = function onConnectionOpen(absintheSocket) {\n  var _this5 = this;\n\n  _newArrowCheck(this, _this$p);\n\n  return function () {\n    _newArrowCheck(this, _this5);\n\n    if (shouldJoinChannel(absintheSocket)) {\n      joinChannel(absintheSocket);\n    }\n  }.bind(this);\n}.bind(undefined);\n\nvar absintheChannelName = \"__absinthe__:control\";\n/**\n * Creates an Absinthe Socket using the given Phoenix Socket instance\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n * import {Socket as PhoenixSocket} from \"phoenix\";\n\n * const absintheSocket = withAbsintheSocket.create(\n *   new PhoenixSocket(\"ws://localhost:4000/socket\")\n * );\n */\n\nvar create = function create(phoenixSocket) {\n  _newArrowCheck(this, _this$p);\n\n  var absintheSocket = {\n    phoenixSocket: phoenixSocket,\n    channel: phoenixSocket.channel(absintheChannelName),\n    channelJoinCreated: false,\n    notifiers: []\n  };\n  phoenixSocket.onOpen(onConnectionOpen(absintheSocket));\n  phoenixSocket.onClose(onConnectionClose(absintheSocket));\n  phoenixSocket.onMessage(onMessage(absintheSocket));\n  return absintheSocket;\n}.bind(undefined);\n\nvar _this$q = undefined;\n\nvar observe = function observe(_ref, observer) {\n  var activeObservers = _ref.activeObservers,\n      rest = _objectWithoutProperties(_ref, [\"activeObservers\"]);\n\n  _newArrowCheck(this, _this$q);\n\n  return _objectSpread({}, rest, {\n    activeObservers: _toConsumableArray(activeObservers).concat([observer]),\n    isActive: true\n  });\n}.bind(undefined);\n\nvar _this$r = undefined;\n/**\n * Observes given notifier using the provided observer\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\"\n *\n * const logEvent = eventName => (...args) => console.log(eventName, ...args);\n *\n * const updatedNotifier = withAbsintheSocket.observe(absintheSocket, notifier, {\n *   onAbort: logEvent(\"abort\"),\n *   onError: logEvent(\"error\"),\n *   onStart: logEvent(\"open\"),\n *   onResult: logEvent(\"result\")\n * });\n */\n\nvar observe$1 = function observe$$1(absintheSocket, notifier, observer) {\n  _newArrowCheck(this, _this$r);\n\n  return refreshNotifier(absintheSocket, observe(notifier, observer));\n}.bind(undefined);\n\nvar _this$s = undefined;\n\nvar createUsing = function createUsing(request, operationType) {\n  _newArrowCheck(this, _this$s);\n\n  return {\n    operationType: operationType,\n    request: request,\n    activeObservers: [],\n    canceledObservers: [],\n    isActive: true,\n    requestStatus: requestStatuses.pending,\n    subscriptionId: undefined\n  };\n}.bind(undefined);\n\nvar create$1 = function create(request) {\n  _newArrowCheck(this, _this$s);\n\n  return createUsing(request, getOperationType(request.operation));\n}.bind(undefined);\n\nvar _this$t = undefined;\n\nvar reactivate = function reactivate(notifier) {\n  _newArrowCheck(this, _this$t);\n\n  return notifier.isActive ? notifier : _objectSpread({}, notifier, {\n    isActive: true\n  });\n}.bind(undefined);\n\nvar _this$u = undefined;\n\nvar connectOrJoinChannel = function connectOrJoinChannel(absintheSocket) {\n  _newArrowCheck(this, _this$u);\n\n  if (absintheSocket.phoenixSocket.isConnected()) {\n    joinChannel(absintheSocket);\n  } else {\n    // socket ignores connect calls if a connection has already been created\n    absintheSocket.phoenixSocket.connect();\n  }\n}.bind(undefined);\n\nvar sendNew = function sendNew(absintheSocket, request) {\n  _newArrowCheck(this, _this$u);\n\n  var notifier = create$1(request);\n  updateNotifiers(absintheSocket, append([notifier]));\n\n  if (absintheSocket.channelJoinCreated) {\n    pushRequest(absintheSocket, notifier);\n  } else {\n    connectOrJoinChannel(absintheSocket);\n  }\n\n  return notifier;\n}.bind(undefined);\n\nvar updateCanceledReactivate = function updateCanceledReactivate(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$u);\n\n  return refreshNotifier(absintheSocket, reactivate(notifier));\n}.bind(undefined);\n\nvar updateCanceled = function updateCanceled(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$u);\n\n  return notifier.requestStatus === requestStatuses.sending ? updateCanceledReactivate(absintheSocket, flushCanceled(notifier)) : updateCanceledReactivate(absintheSocket, notifier);\n}.bind(undefined);\n\nvar updateIfCanceled = function updateIfCanceled(absintheSocket, notifier) {\n  _newArrowCheck(this, _this$u);\n\n  return notifier.isActive ? notifier : updateCanceled(absintheSocket, notifier);\n}.bind(undefined);\n\nvar getExistentIfAny = function getExistentIfAny(absintheSocket, request) {\n  _newArrowCheck(this, _this$u);\n\n  var notifier = find(absintheSocket.notifiers, \"request\", request);\n  return notifier && updateIfCanceled(absintheSocket, notifier);\n}.bind(undefined);\n/**\n * Sends given request and returns an object (notifier) to track its progress\n * (see observe function)\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n *\n * const operation = `\n *   subscription userSubscription($userId: ID!) {\n *     user(userId: $userId) {\n *       id\n *       name\n *     }\n *   }\n * `;\n *\n * // This example uses a subscription, but the functionallity is the same for\n * // all operation types (queries, mutations and subscriptions)\n *\n * const notifier = withAbsintheSocket.send(absintheSocket, {\n *   operation,\n *   variables: {userId: 10}\n * });\n */\n\n\nvar send = function send(absintheSocket, request) {\n  _newArrowCheck(this, _this$u);\n\n  return getExistentIfAny(absintheSocket, request) || sendNew(absintheSocket, request);\n}.bind(undefined);\n\nvar _this$v = undefined; // prettier-ignore\n\nvar getUnsubscriber = function getUnsubscriber(absintheSocket, _ref, observer, unsubscribe) {\n  var _this2 = this;\n\n  var request = _ref.request;\n\n  _newArrowCheck(this, _this$v);\n\n  return function () {\n    _newArrowCheck(this, _this2);\n\n    var notifier = find(absintheSocket.notifiers, \"request\", request);\n    unsubscribe(absintheSocket, notifier, notifier ? observer : undefined);\n  }.bind(this);\n}.bind(undefined);\n\nvar onResult = function onResult(_ref2, observableObserver) {\n  var _this3 = this;\n\n  var operationType = _ref2.operationType;\n\n  _newArrowCheck(this, _this$v);\n\n  return function (result) {\n    _newArrowCheck(this, _this3);\n\n    observableObserver.next(result);\n\n    if (operationType !== \"subscription\") {\n      observableObserver.complete();\n    }\n  }.bind(this);\n}.bind(undefined);\n\nvar createObserver = function createObserver(notifier, handlers, observableObserver) {\n  _newArrowCheck(this, _this$v);\n\n  return _objectSpread({}, handlers, {\n    onAbort: observableObserver.error.bind(observableObserver),\n    onResult: onResult(notifier, observableObserver)\n  });\n}.bind(undefined);\n/**\n * Creates an Observable that will follow the given notifier\n *\n * @param {AbsintheSocket} absintheSocket\n * @param {Notifier<Result, Variables>} notifier\n * @param {Object} [options]\n * @param {function(error: Error): undefined} [options.onError]\n * @param {function(notifier: Notifier<Result, Variables>): undefined} [options.onStart]\n * @param {function(): undefined} [options.unsubscribe]\n *\n * @return {Observable}\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n *\n * const unobserveOrCancelIfNeeded = (absintheSocket, notifier, observer) => {\n *   if (notifier && observer) {\n *     withAbsintheSocket.unobserveOrCancel(absintheSocket, notifier, observer);\n *   }\n * };\n *\n * const logEvent = eventName => (...args) => console.log(eventName, ...args);\n *\n * const observable = withAbsintheSocket.toObservable(absintheSocket, notifier, {\n *   onError: logEvent(\"error\"),\n *   onStart: logEvent(\"open\"),\n *   unsubscribe: unobserveOrCancelIfNeeded\n * });\n */\n\n\nvar toObservable = function toObservable(absintheSocket, notifier) {\n  var _this4 = this;\n\n  var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      unsubscribe = _ref3.unsubscribe,\n      handlers = _objectWithoutProperties(_ref3, [\"unsubscribe\"]);\n\n  _newArrowCheck(this, _this$v);\n\n  return new Observable(function (observableObserver) {\n    _newArrowCheck(this, _this4);\n\n    var observer = createObserver(notifier, handlers, observableObserver);\n    observe$1(absintheSocket, notifier, observer);\n    return unsubscribe && getUnsubscriber(absintheSocket, notifier, observer, unsubscribe);\n  }.bind(this));\n}.bind(undefined);\n\nvar _this$w = undefined;\n\nvar removeObserver = function removeObserver(observers, observer) {\n  _newArrowCheck(this, _this$w);\n\n  return remove(observers.indexOf(observer), 1, observers);\n}.bind(undefined);\n\nvar unobserve = function unobserve(_ref, observer) {\n  var activeObservers = _ref.activeObservers,\n      rest = _objectWithoutProperties(_ref, [\"activeObservers\"]);\n\n  _newArrowCheck(this, _this$w);\n\n  return _objectSpread({}, rest, {\n    activeObservers: removeObserver(activeObservers, observer)\n  });\n}.bind(undefined);\n\nvar _this$x = undefined;\n\nvar ensureHasActiveObserver = function ensureHasActiveObserver(notifier, observer) {\n  _newArrowCheck(this, _this$x);\n\n  if (notifier.activeObservers.includes(observer)) return notifier;\n  throw new Error(\"Observer is not attached to notifier\");\n}.bind(undefined);\n/**\n * Detaches observer from notifier\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n *\n * withAbsintheSocket.unobserve(absintheSocket, notifier, observer);\n */\n\n\nvar unobserve$1 = function unobserve$$1(absintheSocket, notifier, observer) {\n  _newArrowCheck(this, _this$x);\n\n  return updateNotifiers(absintheSocket, refresh(unobserve(ensureHasActiveObserver(notifier, observer), observer)));\n}.bind(undefined);\n\nvar _this$y = undefined;\n\nvar doUnobserveOrCancel = function doUnobserveOrCancel(absintheSocket, notifier, observer) {\n  _newArrowCheck(this, _this$y);\n\n  return notifier.activeObservers.length === 1 ? cancel$1(absintheSocket, notifier) : unobserve$1(absintheSocket, notifier, observer);\n}.bind(undefined);\n/**\n * Cancels notifier if there are no more observers apart from the one given, or\n * detaches given observer from notifier otherwise\n *\n * @example\n * import * as withAbsintheSocket from \"@absinthe/socket\";\n *\n * withAbsintheSocket.unobserve(absintheSocket, notifier, observer);\n */\n\n\nvar unobserveOrCancel = function unobserveOrCancel(absintheSocket, notifier, observer) {\n  _newArrowCheck(this, _this$y);\n\n  return notifier.isActive ? doUnobserveOrCancel(absintheSocket, notifier, observer) : absintheSocket;\n}.bind(undefined);\n\nexport { cancel$1 as cancel, create, observe$1 as observe, send, toObservable, unobserve$1 as unobserve, unobserveOrCancel };","map":null,"metadata":{},"sourceType":"module"}